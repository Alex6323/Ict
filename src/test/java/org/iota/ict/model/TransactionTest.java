package org.iota.ict.model;

import org.junit.Assert;
import org.junit.Test;

import java.math.BigInteger;

public class TransactionTest {
    private static final String
    private static final String EXAMPLE_TRYTES = MAINNET_TRYTES.substring(0, 2187)
            + MAINNET_TRYTES.substring(2187 + 162, 2187 + 162 + 81)
            + MAINNET_TRYTES.substring(2187, 2187 + 162)
            + MAINNET_TRYTES.substring(2187 + 162 + 81);
    ;
    private static final String EXAMPLE_ADDRESS = "BAJSZMDMPQHPWSFVWOJQDPHV9DYSQPIBL9LYZHQKKOVF9TFVTTXQEUWFQSLGLVTGK99VSUEDXIBIWCQHD";

    @Test
    public void testTransactionDecoding() {
        Transaction transaction = new Transaction(EXAMPLE_TRYTES);
        Assert.assertEquals("transaction address", EXAMPLE_ADDRESS, transaction.address);
        Assert.assertEquals("value", BigInteger.valueOf(-7297419313L), transaction.value);
        Assert.assertEquals("timestamp", 1544207541879L, transaction.attachmentTimestamp);
    }

    @Test
    public void testTransactionBuilder() {
        TransactionBuilder builder = new TransactionBuilder();
        builder.address = EXAMPLE_ADDRESS;
        Transaction transaction = builder.build();
        Assert.assertEquals(transaction.address, builder.address);
    }

    @Test
    public void testTransactionEncodingDecoding() {
        Transaction original = new Transaction(EXAMPLE_TRYTES);
        Transaction copy = new Transaction(original.trytes);
        Assert.assertEquals(copy.address, EXAMPLE_ADDRESS);
        Assert.assertEquals(copy.trytes, original.trytes);
    }

    @Test
    public void testCurl123() {
        Transaction transaction = new Transaction(EXAMPLE_TRYTES);
        Assert.assertEquals("DAEFHBJKDCGV9HRNECOBMLNHKEPYPDNNDXUSFCFKD9YKWSHMMYMCQJAVTWBVHWZDCPYNOJCRLZUVMKNBK", transaction.hash);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testNonTryteCharacter() {
        TransactionBuilder builder = new TransactionBuilder();
        builder.address = builder.address.substring(0, Transaction.Field.ADDRESS.tryteLength - 1) + 'z';
        builder.build();
    }
}